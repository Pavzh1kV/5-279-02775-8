/* *********************************************** */
/* РАСКРАСКА НЕОРИЕНТИРОВАННОГО ГРАФА ПО МАТРИЦЕ   */
/* СМЕЖНОСТИ. Задача раскраски графа состоит в том,*/
/* что каждой вершине графа надо так задать цвет,  */
/* чтобы никакие две смежные вершины не имели оди- */
/* наковый цвет, и при этом по возможности исполь- */
/* зовать минимальное количество цветов.           */
/* Эвристичский алгоритм - снимается требование    */
/* обеспечения минимального количества цветов      */
/*  \raskrgrf.cpp*/
#include <stdio.h>
#include <locale.h>
#include <stdlib.h>
//#include <conio.h>
//#include <alloc.h>
#define n 9
/* ============================================= */
/*  ГЛАВНАЯ ФУНКЦИЯ  */
int main(void)
{
    setlocale(LC_ALL,"Russian");
    int i, j, *r;
    int RaskrGraf(int MS[][n], int *c, int nn);
    /*	int M[n][n]=
    	{0,0,0,0,1,1,1,0,0,1,0,0,0,
    	 0,0,0,0,0,1,1,1,0,1,1,0,0,
    	 0,0,0,0,0,0,0,0,0,1,1,1,0,
    	 0,0,0,0,0,0,0,0,0,0,0,0,0,
    	 1,0,0,0,0,0,0,1,0,0,1,0,0,
    	 1,1,0,0,0,0,1,0,0,0,1,1,0,
    	 1,1,0,0,0,1,0,0,0,0,1,1,0,
    	 0,1,0,0,1,0,0,0,0,0,0,1,0,
    	 0,0,0,0,0,0,0,0,0,0,0,0,0,
    	 1,1,1,0,0,0,0,0,0,0,0,0,0,
    	 0,1,1,0,1,1,1,0,0,0,0,0,0,
    	 0,0,1,0,0,1,1,1,0,0,0,0,0,
    	 0,0,0,0,0,0,0,0,0,0,0,0,0};*/
    /* int M[n][n]={0,0,0,0,1,
    				  0,0,1,1,0,
    				  0,1,0,0,1,
    				  0,1,0,0,1,
    				  1,0,1,1,0};*/
    int M[n][n] = { 0, 7, 10, 0, 0, 0, 0, 0, 0,
                    7, 0, 0, 9, 27, 0, 0, 0, 0,
                    10, 0, 0, 8, 0, 0, 0, 0, 31,
                    0, 9, 8, 0, 0, 11, 0, 0, 0,
                    0, 27, 0, 0, 0, 0, 15, 0, 0,
                    0, 0, 0, 11, 0, 0, 15, 17, 0,
                    0, 0, 0, 0, 15, 15, 0, 21, 0,
                    0, 0, 0, 0, 0, 17, 21, 0, 32,
                    0, 0, 31, 0, 0, 0, 0, 32, 0
                  };
    /*	int M[n][n]={0,1,0,0,1,0,
    					 1,0,1,0,0,1,
    					 0,1,0,1,0,1,
    					 0,0,1,0,1,1,
    					 1,0,0,1,0,1,
    					 0,1,1,1,1,0};*/
    printf("\n\n Раскраска графа");
    printf("\n  Матрица смежности графа:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
            printf("%d ", M[i][j]);
        printf("\n");
    }
    getchar();
    r = (int *) calloc(n, sizeof(int));	/* вектор раскраски */
    RaskrGraf(M, r, n);
    printf("\n Вершины закрашены:");
    for (i = 0; i < n; i++)
        printf("\n Вершина=%d   цвет=%d", i + 1, r[i]);
    getchar();
    return 0;
}

/* =================================================== */
/* РАСКРАСКА ГРАФА, представленного матрицей смежности */
int RaskrGraf(int MS[][n], int *c, int nn)
{
    int i, j, m, p, t;
    for (i = 0; i < nn; i++)
        c[i] = 0;
    i = 1;			/* цвет закраски вершин */
    for (j = 0; j < nn; j++)
    {
        if (c[j])		/* вершина уже закрашена */
            continue;
        c[j] = i;		/*  закраска вершины */
        /*Попытаемся закрасить в этот же цвет i другие вершины */
        for (p = j + 1; p < nn; p++)
        {
            if (MS[j][p])
                continue;
            t = 1;		/* признак возможности закраски */
            for (m = p - 1; m >= 0; m--)
            {
                if (MS[p][m] == 0)
                    continue;
                if (c[m] != i)
                    continue;
                t = 0;
                break;		/* вершину р нельзя закрасить */
            }
            if (t && !c[p])
            {
                c[p] = i;	/* попытка удалась, закрасили */
            }
        }
        i++;			/* выбор следующего цвета */
    }
    return 0;
}

/* **************************************************** */
