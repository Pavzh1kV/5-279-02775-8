/* ******************************************************** */
/* readme.txt - о программах к главе 8, каталог GLAVA8      */
/* ======================================================== */
/*    matsmz.cpp - создание матрицы смежности для ориентро- */
/* ванного и неориентированного графа.                      */
/* ======================================================== */
/*    vzmatsmz.cpp - создание взвешенной матрицы смежности  */
/* для ориентированного и неориентированного графа          */
/* ======================================================== */
/*    vectsmez.cpp - формирование векторов смежности для    */
/* орграфа. На входе число вершин, число дуг и дуги, неори- */
/* неориентированное ребро задается как две дуги.           */
/* ======================================================== */
/*    graflist - представление неориентированного графа с   */
/* помощью списков смежности. Для массивов получают динами- */
/* ческую память.                                           */
/* ======================================================== */
/*    incidenc.cpp - представление графа в виде матрицы     */
/* инцидентности. Контроль исходных данных                  */
/* ======================================================== */
/*    pmatr.cpp - вычисление путевой матрицы по заданной    */
/* матрице смежности                                        */
/* ======================================================== */
/*    minpm.cpp - вычисление минимальной путевой матрицы    */
/* по заданной матрице  смежности                           */
/* ======================================================== */
/*    minpmtrm.cpp - вычисление минимальной путевой матрицы */
/* и матрицы маршрутов по заданной матрице смежности        */
/* ======================================================== */
/*    minwaysy.cpp - вычисление кратчайших путей между      */
/* заданной и остальными вершинами графа по заданной матрице*/
/* смежности. Алгоритм Дейкстры.                            */
/* ======================================================== */
/*    floydmph.cpp - вычисление матрицы кратчайших путей и  */
/* матрицы маршрутов между всеми вершинами графа по алго-   */
/* ритму Флойда. floyd29.c - то же самое, но обратите вни-  */
/* мание на способы передачи параметров-двухмерных массивов */
/* ======================================================== */
/*    ostdfs.cpp - вычисление остовного дерева графа        */
/* поиском в глубину                                        */
/* ======================================================== */
/*    ostbfs.cpp - вычисление остовного дерева графа        */
/* поиском в ширину.                                        */
/* ======================================================== */
/*    ostdermi.cpp - вычисление остовного дерева минималь-  */
/* ного веса по алгоритму Прима                             */
/* ======================================================== */
/*    crusc03.cpp - вычисление остовного дерева минимально- */
/* го веса по алгоритму Крускала                            */
/* ======================================================== */
/*    fordsort.cpp - топологическая сортировка графа по     */
/* алгоритму Форда                                          */
/* ======================================================== */
/*    raskrgrf.cpp - раскраска неориентированного графа.    */
/* Задача раскраски графа состоит в том, что каждой вершине */
/* графа надо так задать цвет, чтобы никакие две смежные    */
/* вершины не имели одинаковый цвет, и при этом использовать*/
/* минимальное количество цветов. Эвристический алгоритм -  */
/* использовать ПО ВОЗМОЖНОСТИ минимальное количество цветов*/
/* ******************************************************** */

