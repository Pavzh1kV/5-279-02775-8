/* ВЫЧИСЛЕНИЕ    МИНИМАЛЬНОЙ ПУТЕВОЙ МАТРИЦЫ И МАТРИЦЫ   */
/*	МАРШРУТОВ ПО ЗАДАННОЙ МАТРИЦЕ СМЕЖНОСТИ \minpmtrm.cpp */
#include <stdio.h>
#include <locale.h>
#include <stdlib.h>
//#include <conio.h>
#define n 5
/* ============================================= */
/*  ФУНКЦИЯ ВЫЧИСЛЕНИЯ   МИНИМАЛЬНОЙ ПУТЕВОЙ     */
/*	  МАТРИЦЫ ПО ЗАДАННОЙ МАТРИЦЕ СМЕЖНОСТИ       */
/* А - матрица смежности; Р - минимальная путевая*/
/*	матрица; М - матрица маршрутов                */

void pm(int A[][n], int P[][n], int M[][n], int nn)
{
    int i, j, k;
    for (i = 0; i < nn; i++)
        for (j = 0; j < nn; j++)
        {
            if (A[i][j] == 0)
                P[i][j] = 10000;
            else
                P[i][j] = A[i][j];
            if (i == j)
                P[i][j] = 0;
        }
    for (k = 0; k < nn; k++)
        for (i = 0; i < nn; i++)
            for (j = 0; j < nn; j++)
                if (P[i][j] > (P[i][k] + P[k][j]))
                {
                    P[i][j] = (P[i][k] + P[k][j]);
                    M[i][j] = k + 1;
                }
}

/* ====================================================== */
/*  ПЕЧАТЬ МИНИМАЛЬНОГО ПУТИ МЕЖДУ ДВУМЯ ВЕРШИНАМИ i и j */
int PrintPath(int *M, int n1, int i, int j)
{
    int k;
    int static m = 0;
    k = M[(i - 1) * n + j - 1];
    if (k == 0)
    {
        k = m;
        m = 0;
        return k;
    }
    PrintPath(M, n1, i, k);
    {
        printf(" %4d", k);
        m++;
    }
    PrintPath(M, n1, k, j);
}

/* ======================================================= */
/* ВЫВОД СООБЩЕНИЯ О МИНИМАЛЬНОМ ПУТИ МЕЖДУ ВЕРШИНАМИ i и j*/
void MinPath(int *M, int *P, int n1, int i, int j)
{
    int m;
    if (P[(i - 1) * n1 + j - 1] == 10000)
        printf("\n Между вершинами %d и %d нет пути",
               i, j);
    else
    {
        printf
        ("\n Минимальный путь между вершинами %d и %d равен %d",
         i, j, P[(i - 1) * n1 + j - 1]);
        if (P[(i - 1) * n1 + j - 1] <= 1)
            printf(",\n вершины смежны");
        else
        {
            printf("\n и проходит через вершины:\n");
            m = PrintPath(M, n1, i, j);
        }
    }
    getchar();
}

/* ======================================================== */
int A[n][n] = { 0, 0, 0, 1, 0,
                1, 0, 0, 0, 0,
                0, 0, 0, 0, 1,
                0, 1, 1, 0, 1,
                0, 0, 0, 0, 0
              };

int P[n][n], M[n][n];
/* ======================================================== */
/*  ГЛАВНАЯ ФУНКЦИЯ  */
int main()
{
    setlocale(LC_ALL,"Russian");
    int i, j;
    printf
    ("\n\n Вычисление минимальной путевой матрицы и\
  матрицы маршрутов\n");
    /* Матрицу смежности можно ввести в диалоге: */
    /* printf("\n Введите матрицу смежности:\n");
     for (i=0;i<n;i++)
      for (j=0;j<n;j++)
    	{ printf("\n A[%d,%d]=",i,j);
    	  scanf("%d",&A[i][j]);
    	} */
    printf("\n Матрица смежности:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
            printf("%d  ", A[i][j]);
        printf("\n");
    }
    /* Вычисление минимальной путевой матрицы */
    pm(A, P, M, n);
    printf("\n Минимальная путевая матрица:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
            printf(" %d  ", P[i][j] == 10000 ? 0 : P[i][j]);
        printf("\n");
    }
    /* вывод маршрута между всеми парами вершин */
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            if (i != j)
                MinPath(M[0], P[0], n, i, j);
    return 0;
}

/* ************************************************* */
