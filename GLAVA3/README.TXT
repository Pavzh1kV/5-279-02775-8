/* ******************************************************** */
/* readme.txt - о программах к главе 3. Каталог GLAVA3.     */
/* ======================================================== */
/*    alltree4.cpp - работа с бинарными деревьями:          */
/*	-идеально сбалансированное;                              */
/*	-бинарное дерево поиска;                                 */
/*	-сбалансированное дерево поиска (АВЛ-дерево);            */
/*	-рандомизированное дерево поиска.                        */
/*	Ключ элемента дерева - целое число.                      */
/*	Можно проследить за ходом построения деревьев при включе-*/
/*	нии элементов и разрушения дерева при удалении элементов.*/
/*	В нерекурсивных функциях используются стеки и очереди,   */
/*	поэтому подключаются файлы включения incl_que.cpp и      */
/* incl_stc.c  из каталога GLAVA2                           */
/* ======================================================== */
/*  idbltre1.cpp - идеально сбалансированное бинарное дерево*/
/* ======================================================== */
/*   dtree.cpp - диалоговая программа для работы с бинарными*/
/*  деревьями. Ключ - символьная строка. Некоторые функции  */
/*  оставлены для самостоятельной разработки.               */
/* ======================================================== */
/*   trneud3.cpp - диалоговая программа для работы с бинарным*/
/*  деревом поиска с данными о студентах. Удаление студента */
/*  c тремя неудовлетворительными оценками.                 */
/* ======================================================== */
/*   b_tree.cpp - работа с В-деревом. Имеется возможность   */
/*  проследить за процессом обработки дерева. Ключ - целое  */
/*  число                                                   */
/* ======================================================== */
/*   unb_tree.cpp - объединение двух В-деревьев как множеств*/
/*  Исходные деревья уничтожаются. Ключ элемента дерева -   */
/*  символьная строка. Данные о государствах.               */
/* ======================================================== */
/* D_Btree.cpp и Btree.h обеспечивают работу с В-деревьями. */
/* Btree.h - файл включения, содержит функции для работы    */
/* с В-деревьями. В нем описана структура узла (страницы)   */
/* Page и структура элемента в узле Item. В последнем опре- */
/* делена абстрактная структура данных DATA типа DT.        */
/* DT является синонимом типа структуры данных, определяемой*/
/* в пользовательской программе D_Btree.cpp. Считается, что */
/* ключ в структуре данных DATA имеет идентификатор Skey.   */
/* Соответствие между абстрактной структурой DT DATA и      */
/* реальной структурой данных устанавливается в программе   */
/* пользователя                                             */
/*   typedef EL DT;                                         */
/*   #define Skey fam                                       */
/* Здесь EL и fam - произвольные имя типа структуры данных  */
/* и идентификатор поля ключа в структуре.                  */
/* Для работы с деревьями в пользовательской программе опре-*/
/* деляются указатели на тип Page (Page *T,*A,*B,*C;)       */
/*    D_Btree.cpp - диалоговая программа, которая обеспечивает*/
/* работу с тремя В_деревьями. Некоторые функции оставлены  */
/* для самостоятельной разработки.                          */
/*     ВНИМАНИЕ!!! Перед выполнением операций над тремя     */
/* деревьями (объединение, пересечение, разность деревьев)  */
/* НЕ ДОЛЖНО быть выбрано третье дерево (дерево С).         */
/*    Обратите внимание на функцию                          */
/*   void preordrx(Page *p,void (*f)(DT dt)                 */
/* Она дает возможность расширенной обработки данных в эле- */
/* ментах узлов пользовательской функцией f при нисходящем  */
/* обходе дерева.                                           */
/* ======================================================== */
/*   Poiskper.cpp и Poiskper.h обеспечивают работу с разно- */
/* видностями бинарных деревьев. Связь между файлом включения*/
/* и пользовательской программой осуществляетс аналогично   */
/* описанному выше (D_Btree.cpp и Btree.h.                  */
/* ******************************************************** */
