/* ****************************************************** */
/* readme.txt - о программах к главе 1,  каталог GLAVA1   */
/* Большое внимание уделяется работе с динамическими      */
/* массивами, что позволяет создавать более гибкие        */
/* программы, обеспечивая использование массивов с раз-   */
/* личными размерностями и размерами                      */
/* ====================================================== */
/*    bblsort.c - пример сортировки целочисленного массива*/
/*  методом пузырька                                      */
/* ====================================================== */
/*    copyar.c - копирование массивов. Показана возможность*/
/*  использования одних и тех же функций для работы с одно-*/
/*  мерными и двухмерными массивами                        */
/* ======================================================= */
/*    dinmas.c - показаны возможности использования свобод-*/
/* ного массива для псевдоперестановки строк               */
/* ======================================================= */
/*    dinmas4.cpp - создание и использование динамического */
/* массива с однократным обращением для получения памяти   */
/* ======================================================= */
/*    equal2.c - поиск двух равных элементов в двухмерном  */
/*  массиве целых чисел                                    */
/* ======================================================= */
/*    freear.cpp - пример использования свободного массива.*/
/*  Выделение слов из строки и размещение их в строках сво-*/
/*  бодного массива, по одному слову в каждой строке       */
/* ======================================================= */
/*    maxmin.c - поиск максимального элемента среди мини-  */
/*  мальных элементов в строках двухмерного массива        */
/* ======================================================= */
/*    ntrgmatr.cpp - работа с треугольными матрицами: сло- */
/*  жение, вычитание, умножение, вычисление детерминанта   */
/* ======================================================= */
/*    poisk.c, poisk1.c, poisk2.c - поиск в целочисленном  */
/* массиве по совпадению ключа, результат - индекс найден- */
/* ного  элемента либо нуль. Разные варианты.              */
/* ======================================================= */
/*    sravn.c - сравнение двух целочисленных упорядоченных */
/*  массивов                                               */
/* ========================================================== */
/*    src_same.cpp - поиск в двухмерном массиве элемента,     */
/*  встречающегося в каждой строке массива. Элементы в строке */
/*  массива упорядочены по возрастанию их значений. Алгоритм  */
/*  поиска заключается в том, что для каждого элемента первой */
/*  строки осуществляется поиск в строках массива, начиная со */
/*  второй.Поскольку элементы в строке упорядочены, то поиск  */
/*  может производиться либо последовательным просмотром, либо*/
/*  делением пополам (бинарный поиск). В первом случае поиск  */
/*  прекращается, если элемент найден или когда очередной     */
/*  элемент окажется больше искомого. Если для очередного     */
/*  элемента первой строки поиск в любой строке окажется неудач-
/*  ным, то дальнейший поиск для этого элемента прекращается. */
/* ========================================================== */
/*    transp.c - танспонирование матрицы                    */
/* ======================================================== */
/*    umnmatr.c, umnmatr.cpp - умножение матриц. В первой   */
/*  программе показаны возможные ошибки при использовании   */
/*  массивов                                                */
/* ======================================================== */
/*    umn_m_v.c, umn_v_m - умножение матрицы на вектор и    */
/*  умножение вектора на матрицу                            */
/* ======================================================== */
/*   vector1.c - использование динамической векторной памяти*/
/* ======================================================== */
/*   sortdin.cpp, sortdin1.cpp - сортировка динамического   */
/* свободного массива методом пузырька                      */
/* ======================================================== */
/*   sortstr.cpp - сортировка массива строк, представленного*/
/* в виде двухмерного массива символов                      */
/* ******************************************************** */
