/* ******************************************************** */
/*  ПОИСК МАКСИМАЛЬНОГО ЭЛЕМЕНТА СРЕДИ МИНИМАЛЬНЫХ В СТРОКАХ */
/*  ДВУХМЕРНОГО МАССИВА \maxmin.c */
#include <stdio.h>
#include <locale.h>
#include <stdlib.h>
//#include <conio.h>
#define m 4
#define n 5
int A[m][n] = { 23, 2, 1, 4, 5,
                6, 9, 6, 10, 7,
                19, 20, 17, 18, 6,
                12, 11, 15, 14, 13
              };

/* ========================================================= */
int main()
{
    setlocale(LC_ALL,"Russian");
    int MaxMin(int A[][n], int mm, int nn, int *imax, int *jmax);
    int MaxMin1(int *a, int mm, int nn, int *imax, int *jmax);
    int max, imax, jmax, i, j;
    printf
    ("\n Поиск MaxMin в двухмерном массиве целых чисел,вариант 1 ");
    printf("\n Исходный массив:");
    for (i = 0; i < m; i++)
    {
        printf("\n");
        for (j = 0; j < n; j++)
            printf("%5d", A[i][j]);
    }
    max = MaxMin(A, m, n, &imax, &jmax);
    printf("\n MaxMin = A[%d][%d] = %d", imax, jmax, max);
    getchar();
    printf
    ("\n Поиск MaxMin в двухмерном массиве целых чисел, вариант 2 ");
    max = MaxMin1(A[0], m, n, &imax, &jmax);
    printf("\n MaxMin = A[%d][%d] = %d", imax, jmax, max);
    getchar();
    return 0;
}

/* ================================================================ */
/*  ФУНКЦИЯ ПОИСКА МАКСИМУМА СРЕДИ МИНИМАЛЬНЫХ ЭЛЕМЕНТОВ
   В СТРОКАХ   ДВУХМЕРНОГО МАССИВА, ВЫЧИСЛЕНИЕ ИНДЕКСОВ  */
int MaxMin1(int *a, int mm, int nn, int *imax, int *jmax)
{
    int i, j, min, max, imin, jmin;
    /* Сначала предполагаем, что максимальным элементом является
    	начальный элемент нулевой строки A[0][0],
    	затем заменяем его на минимальный элемент в этой же строке,
    	то есть  теперь минимальный элемент нулевой строки принимается
    	за максимальный среди минимальных */
    max = a[0];
    *imax = 0;
    *jmax = 0;
    for (j = 1; j < nn; j++)
        if (a[j] < max)
        {
            max = a[j];
            *imax = 0;
            *jmax = j;
        }
    /*  Последовательно обрабатывая остальные строки, находим в каждой
    	из них минимальный элемент. Если окажется, что он больше текущего
    	максимума, то он становится теперь максимальным */
    for (i = 1; i < mm; i++)
    {
        min = a[i * n];
        imin = i;
        jmin = 0;
        for (j = 1; j < nn; j++)
            if (a[i * n + j] < min)
            {
                min = a[i * n + j];
                imin = i;
                jmin = j;
            }
        if (max < min)
        {
            max = min;
            *imax = imin;
            *jmax = jmin;
        }
    }
    return max;
}

/* ====================================================== */
/* ФУНКЦИЯ ПОИСКА МАКСИМУМА СРЕДИ МИНИМАЛЬНЫХ ЭЛЕМЕНТОВ
   В СТРОКЕ   ДВУХМЕРНОГО МАССИВА, ОБЫЧНАЯ ИНДЕКСАЦИЯ  */
int MaxMin(int A[][n], int mm, int nn, int *imax, int *jmax)
{
    int i, j, min, max, imin, jmin;
    /* Сначала предполагаем, что максимальным элементом является
    	начальный элемент нулевой строки A[0][0],
    	затем заменяем его на минимальный элемент в этой же строке,
    	то есть  теперь минимальный элемент нулевой строки принимается
    	за максимальный среди минимальных */
    max = A[0][0];
    *imax = 0;
    *jmax = 0;
    for (j = 1; j < nn; j++)
        if (A[0][j] < max)
        {
            max = A[0][j];
            *imax = 0;
            *jmax = j;
        }
    /*  Последовательно обрабатывая остальные строки, находим в каждой
    	из них минимальный элемент. Если окажется, что он больше текущего
    	максимума, то он становится теперь максимальным */
    for (i = 1; i < mm; i++)
    {
        min = A[i][0];
        imin = i;
        jmin = 0;
        for (j = 1; j < nn; j++)
            if (A[i][j] < min)
            {
                min = A[i][j];
                imin = i;
                jmin = j;
            }
        if (max < min)
        {
            max = min;
            *imax = imin;
            *jmax = jmin;
        }
    }
    return max;
}

/* ****************************************************** */
