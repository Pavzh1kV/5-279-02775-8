/* ***************************************************** */
/* Использование векторной памяти.    Хусаинов 4.9.1999 */
/* Элементами вектора являются вещественные числа,
	обработка данных вектора сводится к печати элементов */
/* c:\bc\xbs\spisok\vector1.cpp */
/* ======================================================== */
#include <stdio.h>
#include <locale.h>
#include <stdlib.h>
//#include <alloc.h>
#include <string.h>
#define DESC struct DD		/* Структура дескриптора вектора */
DESC
{
    char tp;			/* Тип вектора */
    char name[8];		/* Имя вектора */
    float *ptr_v;		/* Указатель на поле данных вектора */
    int len;			/* Длина элемента вектора */
    int m;			/* Индекс начального элемента */
    int n;			/* Индекс конечного элемента */
};

/* ======================================================== */
int main()
{
    setlocale(LC_ALL,"Russian");
    DESC *d1;			/* Указатель на дескриптор вектора */
    float *ptr_i;		/* Указатель на элемент вектора */
    float a;			/* Для выборки элемента */
    int i;
    printf
    ("\n   Работа с вектором в динамической памяти ");
    /* Выделение памяти под дескриптор */
    d1 = (DESC *) malloc(sizeof(DESC));	/* Память под дескриптор */

    /* Занесение в вектор управляющей информации */
    d1->tp = 'v';		/* Тип вектора - не используется */
    strcpy(d1->name, "m1");	/* Имя вектора - не используется */
    d1->len = sizeof(float);	/* Длина элемента вектора */
    d1->m = -3;			/* Индекс начального элемента */
    d1->n = 5;			/* Индекс конечного элемента */

    /* Выделение памяти под вектор размером (n-m+1)*len */
    d1->ptr_v = (float *) calloc((d1->n - d1->m + 1), d1->len);

    /* Присвоение значений элементам вектора */
    for (i = d1->m; i <= d1->n; i++)  	/* Адрес i-го элемента вектора */
    {
        ptr_i = d1->ptr_v + i - d1->m;
        /* Занесем в i-й элемент число  */
        *ptr_i = 12.34 / (i + 1);
    }

    /* Выборка и обработка элементов вектора */
    printf("\n Элементы с индексами -3, -2,...,4, 5 \n");
    for (i = d1->m; i <= d1->n; i++)
    {
        ptr_i = d1->ptr_v + i - d1->m;
        a = *ptr_i;		/* Выборка элемента */
        printf("\n %d -й элемент = %f", i, a);	/* Обработка элемента - печать */
    }
    free(d1->ptr_v);
    free(d1);
    getchar();
    return 0;			/* Ждем нажатия ввода */
}

/* ************************************************************ */
