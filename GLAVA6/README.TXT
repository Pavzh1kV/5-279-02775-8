/* *************************************************************** */
/* README - о программах к главе 6, каталог GLAVA6                 */
/* =============================================================== */
/*    bisearch.cpp - бинарный поиск в упорядоченной таблице (мас-  */
/*  сиве) целых чисел. Программы поиска см. также в каталоге GLAVA1*/
/* =============================================================== */
/*    smpltbl3.cpp - работа с тремя таблицами, данные о гсударст-  */
/*  вах. Таблицы последовательные, неупорядоченные, первоначально  */
/*  создаются в файлах, для обработки считываются в основную память*/
/*  Работа пользователя в режиме меню. Разработка многих функций   */
/*  оставлена для упражнений.                                      */
/* =============================================================== */
/*    svzntdl2.cpp - работа с двумя логически связанными таблицами,*/
/* анкетные данные и успеваемость студентов. Поиск студентов с     */
/* средним баллом не менее 4,5 по трем ведущим дисциплинам.        */
/* =============================================================== */
/*    treetbl1.cpp - работа с древовидной таблицей в векторной     */
/* памяти, элемент - структура, ключ - целое число. Демонстрируются*/
/* возможности функций, работа без меню.                           */
/* =============================================================== */
/*    treetbl2.cpp - то же, что и программа treetbl1.cpp, но ключ -*/
/* символьная строка (фамилия).                                    */
/* =============================================================== */
/*    hashfunc.cpp - вычисление функции расстановки (хеш-функции)  */
/* по сумме символов ключа: со сдвигом и без сдвига, с умножением  */
/* на дробное число 0,6180339887 и без умножения, по значениям     */
/* первых двух символов.                                           */
/* =============================================================== */
/*   hash2x.cpp - работа с хеш-таблицей. Разрешение коллизий мето- */
/* дом открытой адресации с двойным хешированием. Элементы - данные*/
/* об успеваемости студентов.                                      */
/* =============================================================== */
/*   hsh2test.cpp - работа с хеш-таблицей. Разрешение коллизий     */
/* методом открытой адресации с двойным хешированием. Программа    */
/* тестирования и анализа результатов.                             */
/*   При числе элементов в таблице, равном 47, и различных коэффи- */
/* циентах заполнения получены следующие результаты:               */
/* --------------------------------------------------------------- */
/*	Число включенных| Коэф. |Число попыток и среднее| То же на не-  */
/*    элементов    |заполн.|число на удачный поиск | удачный поиск */
/* --------------------------------------------------------------- */
/*      30         | 0,638 | 67   67/30=2,23       | 46 46/17=2,71 */
/*      35         | 0,745 | 74   74/35=2,11       | 51 51/12=4,25 */
/*      40         | 0,851 | 94   94/40=2,35       | 35 35/7=5,0   */
/*      45         | 0,957 | 127  127/45=2,82      | 28 28/2=14,0  */
/*      46         | 0,979 | 130  130/46=2,83      | 25 25/1=25,0  */
/*      47         | 1,000 | 155  155/47=3,29      |               */
/* =============================================================== */
/*   htbl_gos.cpp - работа с хеш-таблицей. Адрес входа в таблицу   */
/* (индекс) - двоичное значение первой буквы названия государства  */
/* -128 (0...32). Конфликтные записи помещаются во внешние динами- */
/* ческие цепочки (для каждой прописной буквы алфавита - своя      */
/* цепочка). Записи по каждому входу упорядочены. Первая запись по */
/* входу помещается в строку самой хеш-таблицы.                    */
/* =============================================================== */
/*   h_bgntbl.cpp - работа с хеш-таблицей государств. Таблица с    */
/* внутренними цепочками. Конфликтные записи помещаются с начала   */
/* таблицы в свободные ячейки. Освободившиеся после удаления запи- */
/* сей строки таблицы повторно не используются, т.к. использование */
/* одного пространства для всех цепочек приводит к смешению элем-  */
/* тов различных цепочек.                                          */
/* =============================================================== */
/* h_bgntb1.cpp - программа тестирования и анализа результатов ра- */
/* работы предыдущей программы. В качестве названий государств ис- */
/* пользован упорядоченный в орфографическом порядке список фами-  */
/* лий, что сделано специально для получения наибольшего числа     */
/* коллизий по входам. Получены следующие результаты поиска эл-тов */
/* в таблице. Если хеш-функция построена в прямом порядке поступле-*/
/* ния фамилий из исходного списка, то все 35 элементов таблицы    */
/* будут найдены за 158 попыток, т.е. на поиск одного элемента в   */
/* среднем приходится 158/35=4,5 попыток, а на поиск 32 несуществу-*/
/* ющих элементов (по числу букв в русском алфавите) сделано 539   */
/* попыток,  т.е. в среднем на один элемент 539/32=16,9 попыток.   */
/*   Если же хеш-таблица построена в обратном порядке поступления  */
/* элементов из исходного списка, то результаты следующие: поиск   */
/* существующих 95/35=2,7; несуществующих 158/32=4,9.              */
/*   При размещении конфликтных записей в свободные ячейки с начала*/
/* таблицы большинство записей попадает не в "свои" ячейки, что    */
/* приводит к ухудшению характеристик таблицы по поиску. При этом  */
/* коэффициент заполнения таблицы никак не влияет на эти характе-  */
/* ристики.
/*     Если же конфликтные записи размещать в свободных ячейках    */
/* с конца таблицы, то коэффициент заполнения таблицы в какой-то мере*/
/* сказывается на характеристиках поиска. Так, при коэффициенте    */
/* заполнения 35/47=0,745 получены следующие результаты. Заполнение*/
/* таблицы в прямом порядке, поиск 35 существующих записей 70/35=2;*/
/* поиск несуществующих 32 записей 53/32=1,66. Заполнение таблицы  */
/* в обратном порядке, поиск 35 существующих записей 70/35=2, поиск*/
/* 32 несуществующих записей 55/32=1,72.                           */
/*    При коэффициенте заполнения, равном 1,  соответствующие      */
/* результаты несколько хуже: 71/35=2,03; 71/32=2,22; 67/35=1,91   */
/* (несколько лучше); 66/32=2,06                                   */
/* *************************************************************** */
