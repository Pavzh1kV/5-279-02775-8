/* *************************************************************** */
/*  СОРТИРОВКА МЕТОДОМ ПРЯМОГО ВКЛЮЧЕНИЯ, из двух неотсортиро-
	 ванных массивов A[n] и B[m] создается один объединенный
	 отсортированный массив C[n+m].  Два варианта объединения:
	 1) В одной функции SortAB1 объединение и сортировка совмещены
	 2) В функции SortAB2 осуществляется объединение массивов, затем
		 вызывается функция Sis для сортировки объединенного массива  */
/*  \sortarrs.cpp */
#include <stdio.h>
#include <locale.h>
#include <stdlib.h>
//#include <conio.h>
//#include <alloc.h>
#define n 8
#define m 5
/* Все три варианта данных сортируются нормально */
/*int A[n] = {13,12,11,10,9,8,7,6};
int B[n] = {5,4,3,2,1};*/
/*int A[n] = {8,7,6,5,4,3,2,1};
int B[m] = {13,12,11,10,9};*/
int B[m] = { 15, 4, 33, 12, 0 };
int A[n] = { 13, 12, 17, 10, 9, 18, 7, 1 };

int *Sis(int *A, int nn);
int *SortAB1(int A[], int nn, int B[], int mm);
int *SortAB2(int A[], int nn, int B[], int mm);
/* =================================================== */
main()
{
    setlocale(LC_ALL,"Russian");
    int j, k, *C, *C2;
    printf
    ("\n Объединение и сортировка двух массивов");
    printf("\n Исходный  массив A: \n\t");
    for (j = 0; j < n; j++)
        printf("%d\t", A[j]);
    printf("\n");
    getchar();
    printf("\n Исходный  массив B: \n\t");
    for (j = 0; j < m; j++)
        printf("%d\t", B[j]);
    printf("\n");
    getchar();

    printf
    ("\n Вариант 1: объединение и сортировка совмещены");
    C = SortAB1(A, n, B, m);
    printf
    ("\n Обработка отсортированного массива сводится к его печати");
    printf("\n Отсортированный массив :\n\t");
    k = m + n;
    for (j = 0; j < k; j++)
        printf("%d\t", C[j]);
    printf("\n");
    getchar();

    printf
    ("\n Вариант 2: сначала объединение, затем сортировка ");
    C2 = SortAB2(A, n, B, m);
    printf
    ("\n Обработка отсортированного массива сводится к его печати");
    printf("\n Отсортированный массив :\n\t");
    k = m + n;
    for (j = 0; j < k; j++)
        printf("%d\t", C2[j]);
    printf("\n");
    getchar();
    return 0;
}

/* ========================================================= */
/*  СОРТИРОВКА ПРЯМЫМ ВКЛЮЧЕНИЕМ ДВУХ ОБЪЕДИНЕННЫХ МАССИВОВ:
	  объединение и сортировка совмещены */
int *SortAB1(int A[], int nn, int B[], int mm)
{
    int i, j, k, *C;
    C = (int *) calloc(nn + mm, sizeof(int));	/* Объединенный массив */

    /* Включение элементов 1-го массива в объединенный массив */
    C[0] = A[0];
    for (j = 1; j < nn; j++)
    {
        k = C[j] = A[j];
        i = j - 1;
        while (k < C[i] && i >= 0)
        {
            C[i + 1] = C[i];
            i -= 1;
        }
        C[i + 1] = k;
    }

    /* Включение элементов 2-го массива в объединенный массив */
    for (j = nn; j < nn + mm; j++)
    {
        k = C[j] = B[j - nn];
        i = j - 1;
        while (k < C[i] && i >= 0)
        {
            C[i + 1] = C[i];
            i -= 1;
        }
        C[i + 1] = k;
    }
    /* Возврат указателя объединенного упорядоченного массива */
    return C;
}

/* ========================================================= */
/*  СОРТИРОВКА ПРЯМЫМ ВКЛЮЧЕНИЕМ ДВУХ ОБЪЕДИНЕННЫХ МАССИВОВ:
	 сначала объединение, затем сортировка */
int *SortAB2(int A[], int nn, int B[], int mm)
{
    int j, k, *C;
    C = (int *) calloc(nn + mm, sizeof(int));	/* Объединенный массив */
    /* Слияние двух массивов без сортировки */
    for (j = 0; j < nn; j++)
        C[j] = A[j];
    k = nn + mm;
    for (j = nn; j < k; j++)
        C[j] = B[j - nn];

    /* Вызов функции сортировки */
    Sis(C, k);

    /* Возврат указателя объединенного массива */
    return C;
}

/* ======================================================= */
/*   ФУНКЦИЯ СОРТИРОВКИ ПРЯМЫМ ВКЛЮЧЕНИЕМ  */
int *Sis(int *A, int nn)
{
    int i, j, k;
    for (j = 1; j < nn; j++)
    {
        k = A[j];
        i = j - 1;
        while (k < A[i] && i >= 0)
        {
            A[i + 1] = A[i];
            i -= 1;
        }
        A[i + 1] = k;
    }
}

/* ********************************************************* */
